// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Telstar.Data;

#nullable disable

namespace Telstar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208175257_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Telstar.Models.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("destinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b506485-0810-40db-825e-459a4d54276c"),
                            City = "Addis Abeba"
                        },
                        new
                        {
                            Id = new Guid("7aaeaa6a-a259-4930-a9f3-f16301fc02dc"),
                            City = "Amatave"
                        },
                        new
                        {
                            Id = new Guid("86d72425-94e7-47c2-a129-d457583cbc51"),
                            City = "Bahr El Ghazal"
                        },
                        new
                        {
                            Id = new Guid("14d15128-1d2c-46b9-bc35-6612cdba158a"),
                            City = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("bfbf440f-bb9a-46b6-9c2e-b68fe643d728"),
                            City = "Congo"
                        },
                        new
                        {
                            Id = new Guid("801e26e3-03bc-432a-a988-ced63192863b"),
                            City = "Dakar"
                        },
                        new
                        {
                            Id = new Guid("f789af7b-c20b-4ac6-b471-b297d9b49519"),
                            City = "Darfur"
                        },
                        new
                        {
                            Id = new Guid("205106c8-9e8f-4077-b9ef-74279210aa6b"),
                            City = "De Kanariske Oerne"
                        },
                        new
                        {
                            Id = new Guid("d2bfe8e3-a3de-4d98-98dd-a688858264f5"),
                            City = "Dragebjerget"
                        },
                        new
                        {
                            Id = new Guid("7c553628-0b76-4057-a8ef-54941fc86537"),
                            City = "Guldkysten"
                        },
                        new
                        {
                            Id = new Guid("8ef070ed-0f78-4042-8578-b0489632cf6c"),
                            City = "Hvalbugten"
                        },
                        new
                        {
                            Id = new Guid("1f1aa69e-36a3-462e-9065-5375155845c4"),
                            City = "Kabalo"
                        },
                        new
                        {
                            Id = new Guid("a9017527-af3d-4769-8618-f190831c6416"),
                            City = "Kap Guardafui"
                        },
                        new
                        {
                            Id = new Guid("a2d3c517-15a6-4888-989b-342e23642d50"),
                            City = "Kap St. Marie"
                        },
                        new
                        {
                            Id = new Guid("918e1f3d-d2c3-420a-8efb-3b1bfe934dcb"),
                            City = "Kapstaden"
                        },
                        new
                        {
                            Id = new Guid("3a70a4f1-6114-412b-9a0f-b72a9f14a070"),
                            City = "Luanda"
                        },
                        new
                        {
                            Id = new Guid("924a8322-beb2-460d-b01f-3f06881da2e0"),
                            City = "Marrakesh"
                        },
                        new
                        {
                            Id = new Guid("fc1ead62-3529-4d82-840b-2000ce78af57"),
                            City = "Mocambique"
                        },
                        new
                        {
                            Id = new Guid("0564ca18-c65d-4753-ad3e-ac8beabe577b"),
                            City = "Omdurman"
                        },
                        new
                        {
                            Id = new Guid("e4a9199f-eb80-4bb1-a149-ff255046de06"),
                            City = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("ae51a8af-b9c9-4494-aabc-4c039329f0be"),
                            City = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("03a86ab3-9186-4c2c-8793-51e61d0d2c62"),
                            City = "Slavekysten"
                        },
                        new
                        {
                            Id = new Guid("ff9aaf09-da42-420e-801e-515c10abe01d"),
                            City = "St. Helena"
                        },
                        new
                        {
                            Id = new Guid("7281729d-a680-487b-9d3a-bf4f0e45dd63"),
                            City = "Suakin"
                        },
                        new
                        {
                            Id = new Guid("309eabe2-4015-44ea-99e3-f8206510d679"),
                            City = "Tanger"
                        },
                        new
                        {
                            Id = new Guid("450243a1-dd52-4b93-a314-933d095e5ca6"),
                            City = "Timbuktu"
                        },
                        new
                        {
                            Id = new Guid("ac6caebb-f9ff-4fdd-91c1-928a1b70e43d"),
                            City = "Tripoli"
                        },
                        new
                        {
                            Id = new Guid("7000c9d3-ebe9-44b5-b083-e7f9076db2df"),
                            City = "Tunis"
                        },
                        new
                        {
                            Id = new Guid("8676f27d-94c4-49a0-8002-02a807cde6f7"),
                            City = "Victoria Faldene"
                        },
                        new
                        {
                            Id = new Guid("ceb8aa1a-5824-4dd7-ae7c-e1d02dbe95bf"),
                            City = "Victoria Soeen"
                        },
                        new
                        {
                            Id = new Guid("07c12bde-1ef7-44f7-ac95-73a9fffff529"),
                            City = "Wadai"
                        },
                        new
                        {
                            Id = new Guid("f3efd3cb-26b0-4d3e-89ed-549fb3a3d64e"),
                            City = "Zanzibar"
                        });
                });

            modelBuilder.Entity("Telstar.Models.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeHours")
                        .HasColumnType("float");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("edges");
                });

            modelBuilder.Entity("Telstar.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("heightInCm")
                        .HasColumnType("float");

                    b.Property<double>("lengthInCm")
                        .HasColumnType("float");

                    b.Property<double>("paidToEICInUSD")
                        .HasColumnType("float");

                    b.Property<double>("paidToOAInUSD")
                        .HasColumnType("float");

                    b.Property<string>("timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalCostInUSD")
                        .HasColumnType("float");

                    b.Property<Guid>("typeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("weightInKg")
                        .HasColumnType("float");

                    b.Property<double>("widthInCm")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("typeid");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("Telstar.Models.Type", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("priceModifier")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telstar.Models.Shipment", b =>
                {
                    b.HasOne("Telstar.Models.Type", "type")
                        .WithMany("shipments")
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("type");
                });

            modelBuilder.Entity("Telstar.Models.Type", b =>
                {
                    b.Navigation("shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
