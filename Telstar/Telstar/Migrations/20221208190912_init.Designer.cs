// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Telstar.Data;

#nullable disable

namespace Telstar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208190912_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Telstar.Models.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("destinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0224c301-4a94-48f6-8df8-f27568583cf4"),
                            City = "Addis Abeba"
                        },
                        new
                        {
                            Id = new Guid("1cd2894a-d5a0-4625-8bc2-0c5490e214e3"),
                            City = "Amatave"
                        },
                        new
                        {
                            Id = new Guid("7765213e-1922-423e-a5ae-da28e4097ac0"),
                            City = "Bahr El Ghazal"
                        },
                        new
                        {
                            Id = new Guid("c51750b7-1323-461c-ac86-7c9bdf56bc2f"),
                            City = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("b65a83f8-2607-4abd-8885-e9c29f20a069"),
                            City = "Congo"
                        },
                        new
                        {
                            Id = new Guid("c0c0ba05-6866-49b1-8523-9a0f62c495ff"),
                            City = "Dakar"
                        },
                        new
                        {
                            Id = new Guid("670ba475-8ae7-434b-893c-376ce9a48264"),
                            City = "Darfur"
                        },
                        new
                        {
                            Id = new Guid("aead90a5-4003-43fc-9045-0a3ae289bb52"),
                            City = "De Kanariske Oerne"
                        },
                        new
                        {
                            Id = new Guid("07318326-2642-488f-8bef-fd14f284535e"),
                            City = "Dragebjerget"
                        },
                        new
                        {
                            Id = new Guid("d6c6c34c-b434-4664-a8ec-98919e7e2397"),
                            City = "Guldkysten"
                        },
                        new
                        {
                            Id = new Guid("bb46185e-79e2-47c7-bce1-ffc89a7818e6"),
                            City = "Hvalbugten"
                        },
                        new
                        {
                            Id = new Guid("74ea4fcf-c9d3-4ee4-9973-4794409ee32e"),
                            City = "Kabalo"
                        },
                        new
                        {
                            Id = new Guid("d6fec231-cdab-484b-abbf-607aca5f7a4b"),
                            City = "Kap Guardafui"
                        },
                        new
                        {
                            Id = new Guid("a7f054d5-253a-487b-92cd-59720cad5582"),
                            City = "Kap St. Marie"
                        },
                        new
                        {
                            Id = new Guid("ef2a1edf-fee7-4196-a602-7aa7f3ab2120"),
                            City = "Kapstaden"
                        },
                        new
                        {
                            Id = new Guid("19e528f1-3ad3-4d76-bfd7-72f41bac5f72"),
                            City = "Luanda"
                        },
                        new
                        {
                            Id = new Guid("a9033b27-2571-4ce7-95d7-0c7407bbafd5"),
                            City = "Marrakesh"
                        },
                        new
                        {
                            Id = new Guid("85bdd99f-e1ec-42d3-8ea3-41a396522dd3"),
                            City = "Mocambique"
                        },
                        new
                        {
                            Id = new Guid("d39e48cf-c3a3-4ef2-a1c8-aba7a34e0e53"),
                            City = "Omdurman"
                        },
                        new
                        {
                            Id = new Guid("7abfb28a-949b-4bb9-bd50-45c04af944a8"),
                            City = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("ae9bf889-10eb-4cbf-b885-aac0f2cb0194"),
                            City = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("20807d44-7cf0-4d3e-aca6-3110d5a235da"),
                            City = "Slavekysten"
                        },
                        new
                        {
                            Id = new Guid("01d7f120-d7d9-49bc-a506-a80cce326ec5"),
                            City = "St. Helena"
                        },
                        new
                        {
                            Id = new Guid("d3cc2d37-7dca-4f08-912c-c3f0155be93d"),
                            City = "Suakin"
                        },
                        new
                        {
                            Id = new Guid("1b470316-2a4a-4333-b7a2-78b4d9a25957"),
                            City = "Tanger"
                        },
                        new
                        {
                            Id = new Guid("156f957a-b6c5-4986-b5ae-3de2f66b272f"),
                            City = "Timbuktu"
                        },
                        new
                        {
                            Id = new Guid("14f4fcba-bc07-4dab-9dcf-6c78953b3248"),
                            City = "Tripoli"
                        },
                        new
                        {
                            Id = new Guid("46252414-e5e7-4df3-ab22-7e4fe0604cbf"),
                            City = "Tunis"
                        },
                        new
                        {
                            Id = new Guid("5a7a1777-c127-435c-bbb3-7855ff40ae9e"),
                            City = "Victoria Faldene"
                        },
                        new
                        {
                            Id = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            City = "Victoria Soeen"
                        },
                        new
                        {
                            Id = new Guid("edf4987f-4dad-46a5-901e-f70d7f149c6c"),
                            City = "Wadai"
                        },
                        new
                        {
                            Id = new Guid("7a81a4a1-e0c8-405e-8352-02f484a8cee2"),
                            City = "Zanzibar"
                        });
                });

            modelBuilder.Entity("Telstar.Models.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeHours")
                        .HasColumnType("float");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("fromDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("toDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fromDestinationId");

                    b.HasIndex("toDestinationId");

                    b.ToTable("edges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6b804d3-58ac-4870-885d-3a563a64a65d"),
                            Cost = 12.0,
                            From = "Addis Abeba",
                            TimeHours = 12.0,
                            To = "Victoria Soeen",
                            fromDestinationId = new Guid("0224c301-4a94-48f6-8df8-f27568583cf4"),
                            toDestinationId = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec")
                        });
                });

            modelBuilder.Entity("Telstar.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("heightInCm")
                        .HasColumnType("float");

                    b.Property<double>("lengthInCm")
                        .HasColumnType("float");

                    b.Property<double>("paidToEICInUSD")
                        .HasColumnType("float");

                    b.Property<double>("paidToOAInUSD")
                        .HasColumnType("float");

                    b.Property<string>("timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalCostInUSD")
                        .HasColumnType("float");

                    b.Property<Guid>("typeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("weightInKg")
                        .HasColumnType("float");

                    b.Property<double>("widthInCm")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("typeid");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("Telstar.Models.Type", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("priceModifier")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telstar.Models.Edge", b =>
                {
                    b.HasOne("Telstar.Models.Destination", "fromDestination")
                        .WithMany("FromEdges")
                        .HasForeignKey("fromDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telstar.Models.Destination", "toDestination")
                        .WithMany("ToEdges")
                        .HasForeignKey("toDestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("fromDestination");

                    b.Navigation("toDestination");
                });

            modelBuilder.Entity("Telstar.Models.Shipment", b =>
                {
                    b.HasOne("Telstar.Models.Type", "type")
                        .WithMany("shipments")
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("type");
                });

            modelBuilder.Entity("Telstar.Models.Destination", b =>
                {
                    b.Navigation("FromEdges");

                    b.Navigation("ToEdges");
                });

            modelBuilder.Entity("Telstar.Models.Type", b =>
                {
                    b.Navigation("shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
