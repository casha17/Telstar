// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Telstar.Data;

#nullable disable

namespace Telstar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208211335_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Telstar.Models.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("destinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0224c301-4a94-48f6-8df8-f27568583cf4"),
                            City = "Addis Abeba"
                        },
                        new
                        {
                            Id = new Guid("79feb834-7446-4104-9f21-23892abd6d50"),
                            City = "Amatave"
                        },
                        new
                        {
                            Id = new Guid("fb3eb190-83c2-4d0b-932d-435e48293013"),
                            City = "Bahr El Ghazal"
                        },
                        new
                        {
                            Id = new Guid("b5c29783-f4e9-4adc-be1d-2dc760865357"),
                            City = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("4e173e38-3feb-4fbf-b32e-39e7af310aa0"),
                            City = "Congo"
                        },
                        new
                        {
                            Id = new Guid("4f05293d-778b-4344-bf96-eb8be8baafa0"),
                            City = "Dakar"
                        },
                        new
                        {
                            Id = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a"),
                            City = "Darfur"
                        },
                        new
                        {
                            Id = new Guid("8d38846e-f4c3-4994-94b8-05e18e221334"),
                            City = "De Kanariske Oeer"
                        },
                        new
                        {
                            Id = new Guid("c67fd119-9dc7-441c-8335-cfced090624b"),
                            City = "Dragebjerget"
                        },
                        new
                        {
                            Id = new Guid("a8100e5c-42bf-4039-be60-8d5390fecf35"),
                            City = "Guld kysten"
                        },
                        new
                        {
                            Id = new Guid("db372b4a-782f-444a-8976-a57e0883573a"),
                            City = "Hvalbugten"
                        },
                        new
                        {
                            Id = new Guid("60b1c48c-4d2e-4a65-bf3b-c9315f23ab27"),
                            City = "Kabalo"
                        },
                        new
                        {
                            Id = new Guid("45832d16-eadb-4bbf-b8f1-f2eb6b826d41"),
                            City = "Kap Guardafui"
                        },
                        new
                        {
                            Id = new Guid("6ab3d246-2a09-4fbc-bc23-1d3c672c4236"),
                            City = "Kap St.Marie"
                        },
                        new
                        {
                            Id = new Guid("84bbf8a7-07e1-41a5-ba00-302d98886fb9"),
                            City = "Kapstaden"
                        },
                        new
                        {
                            Id = new Guid("fdb01392-b9af-4dbb-a6d8-4b5805811377"),
                            City = "Luanda"
                        },
                        new
                        {
                            Id = new Guid("65c280d6-e9fa-4dd4-8f3c-918aeef28e1b"),
                            City = "Marrakesh"
                        },
                        new
                        {
                            Id = new Guid("2b102387-95e6-4603-bb33-644352a280ad"),
                            City = "Mocambique"
                        },
                        new
                        {
                            Id = new Guid("5ad64a19-b27a-48b9-95cf-0332e88d7fbf"),
                            City = "Omdurman"
                        },
                        new
                        {
                            Id = new Guid("ac9877b1-d2ba-4cee-b54f-057944515b8b"),
                            City = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("7289b9c0-d3a2-47c4-8ef1-42b761a9071b"),
                            City = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("d8409ad5-0806-404f-9c54-b017c969c19c"),
                            City = "Slavekysten"
                        },
                        new
                        {
                            Id = new Guid("a32cba22-43d5-44ff-8256-9999d70e3ba0"),
                            City = "St. Helena"
                        },
                        new
                        {
                            Id = new Guid("017f584a-c867-494b-809c-f4e2bfa7577e"),
                            City = "Suakin"
                        },
                        new
                        {
                            Id = new Guid("400b7f86-7e41-456e-8d78-d80c6fd14160"),
                            City = "Tanger"
                        },
                        new
                        {
                            Id = new Guid("0c7e8374-f30c-4895-bfe9-63f76d424786"),
                            City = "Timbuktu"
                        },
                        new
                        {
                            Id = new Guid("0b6f1334-e14a-4eba-a4a5-dfdd2f3f6bb5"),
                            City = "Tripoli"
                        },
                        new
                        {
                            Id = new Guid("4ec48c75-d78f-4c52-bdc9-27c81359ad25"),
                            City = "Tunis"
                        },
                        new
                        {
                            Id = new Guid("5b787360-98aa-48ff-b180-2343d1b4a22d"),
                            City = "Victoria Faldene"
                        },
                        new
                        {
                            Id = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            City = "Victoria Soeen"
                        },
                        new
                        {
                            Id = new Guid("6762ac25-184c-45fe-ba68-de1cbfc3a531"),
                            City = "Wadai"
                        },
                        new
                        {
                            Id = new Guid("fd6624c4-846b-4d52-adda-b26171edc520"),
                            City = "Zanzibar"
                        });
                });

            modelBuilder.Entity("Telstar.Models.Edge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TimeHours")
                        .HasColumnType("float");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("fromDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("toDestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("fromDestinationId");

                    b.HasIndex("toDestinationId");

                    b.ToTable("edges");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de731e77-1f26-4aba-86d7-56e072af6b66"),
                            Cost = 6.0,
                            From = "Tanger",
                            TimeHours = 8.0,
                            To = "Marrakesh",
                            fromDestinationId = new Guid("400b7f86-7e41-456e-8d78-d80c6fd14160"),
                            toDestinationId = new Guid("65c280d6-e9fa-4dd4-8f3c-918aeef28e1b")
                        },
                        new
                        {
                            Id = new Guid("f1deda79-1952-48a8-9d2c-8c424c49c5ff"),
                            Cost = 15.0,
                            From = "Tanger",
                            TimeHours = 20.0,
                            To = "Sahara",
                            fromDestinationId = new Guid("400b7f86-7e41-456e-8d78-d80c6fd14160"),
                            toDestinationId = new Guid("ac9877b1-d2ba-4cee-b54f-057944515b8b")
                        },
                        new
                        {
                            Id = new Guid("d0fbdc61-7f08-4d88-8868-9a1c50295325"),
                            Cost = 15.0,
                            From = "Tanger",
                            TimeHours = 20.0,
                            To = "Tunis",
                            fromDestinationId = new Guid("400b7f86-7e41-456e-8d78-d80c6fd14160"),
                            toDestinationId = new Guid("4ec48c75-d78f-4c52-bdc9-27c81359ad25")
                        },
                        new
                        {
                            Id = new Guid("c6e23f2c-0136-4271-94df-b8844dfcef29"),
                            Cost = 9.0,
                            From = "Tunis",
                            TimeHours = 12.0,
                            To = "Tripoli",
                            fromDestinationId = new Guid("4ec48c75-d78f-4c52-bdc9-27c81359ad25"),
                            toDestinationId = new Guid("0b6f1334-e14a-4eba-a4a5-dfdd2f3f6bb5")
                        },
                        new
                        {
                            Id = new Guid("685b1668-80f1-455e-b827-d96f929c3d6e"),
                            Cost = 18.0,
                            From = "Tripoli",
                            TimeHours = 24.0,
                            To = "Omdurman",
                            fromDestinationId = new Guid("0b6f1334-e14a-4eba-a4a5-dfdd2f3f6bb5"),
                            toDestinationId = new Guid("5ad64a19-b27a-48b9-95cf-0332e88d7fbf")
                        },
                        new
                        {
                            Id = new Guid("b3a885c7-d425-4b0f-a515-f61aeb3daba1"),
                            Cost = 12.0,
                            From = "Omdurman",
                            TimeHours = 16.0,
                            To = "Cairo",
                            fromDestinationId = new Guid("5ad64a19-b27a-48b9-95cf-0332e88d7fbf"),
                            toDestinationId = new Guid("b5c29783-f4e9-4adc-be1d-2dc760865357")
                        },
                        new
                        {
                            Id = new Guid("388a2eac-952c-4966-899f-edccadaae437"),
                            Cost = 24.0,
                            From = "Marrakesh",
                            TimeHours = 32.0,
                            To = "Dakar",
                            fromDestinationId = new Guid("65c280d6-e9fa-4dd4-8f3c-918aeef28e1b"),
                            toDestinationId = new Guid("4f05293d-778b-4344-bf96-eb8be8baafa0")
                        },
                        new
                        {
                            Id = new Guid("7f509e9b-6988-46ea-9a5c-1b6a7376f4d8"),
                            Cost = 12.0,
                            From = "Dakar",
                            TimeHours = 16.0,
                            To = "Sierra Leone",
                            fromDestinationId = new Guid("4f05293d-778b-4344-bf96-eb8be8baafa0"),
                            toDestinationId = new Guid("7289b9c0-d3a2-47c4-8ef1-42b761a9071b")
                        },
                        new
                        {
                            Id = new Guid("6ad63d91-4068-4500-b83f-551a7a068482"),
                            Cost = 15.0,
                            From = "Sierra Leone",
                            TimeHours = 20.0,
                            To = "Timbuktu",
                            fromDestinationId = new Guid("7289b9c0-d3a2-47c4-8ef1-42b761a9071b"),
                            toDestinationId = new Guid("0c7e8374-f30c-4895-bfe9-63f76d424786")
                        },
                        new
                        {
                            Id = new Guid("769a2bce-c30c-4431-a821-427cc16c32a1"),
                            Cost = 15.0,
                            From = "Sierra Leone",
                            TimeHours = 20.0,
                            To = "Guld kysten",
                            fromDestinationId = new Guid("7289b9c0-d3a2-47c4-8ef1-42b761a9071b"),
                            toDestinationId = new Guid("a8100e5c-42bf-4039-be60-8d5390fecf35")
                        },
                        new
                        {
                            Id = new Guid("c8c04ae7-be58-4287-8c99-5751dcbfee62"),
                            Cost = 15.0,
                            From = "Timbuktu",
                            TimeHours = 20.0,
                            To = "Slavekysten",
                            fromDestinationId = new Guid("0c7e8374-f30c-4895-bfe9-63f76d424786"),
                            toDestinationId = new Guid("d8409ad5-0806-404f-9c54-b017c969c19c")
                        },
                        new
                        {
                            Id = new Guid("b56152af-27a9-4b32-8e88-da68a8caeb2d"),
                            Cost = 21.0,
                            From = "Slavekysten",
                            TimeHours = 28.0,
                            To = "Wadai",
                            fromDestinationId = new Guid("d8409ad5-0806-404f-9c54-b017c969c19c"),
                            toDestinationId = new Guid("6762ac25-184c-45fe-ba68-de1cbfc3a531")
                        },
                        new
                        {
                            Id = new Guid("58ab22fd-14d5-4d79-a355-e7ca1a8a305d"),
                            Cost = 15.0,
                            From = "Slavekysten",
                            TimeHours = 20.0,
                            To = "Congo",
                            fromDestinationId = new Guid("d8409ad5-0806-404f-9c54-b017c969c19c"),
                            toDestinationId = new Guid("4e173e38-3feb-4fbf-b32e-39e7af310aa0")
                        },
                        new
                        {
                            Id = new Guid("423b0e35-4ce1-4131-8390-6695ac2cba43"),
                            Cost = 21.0,
                            From = "Slavekysten",
                            TimeHours = 28.0,
                            To = "Darfur",
                            fromDestinationId = new Guid("d8409ad5-0806-404f-9c54-b017c969c19c"),
                            toDestinationId = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a")
                        },
                        new
                        {
                            Id = new Guid("7c2d6a65-7d08-4cb8-a69a-3d55a449b777"),
                            Cost = 12.0,
                            From = "Darfur",
                            TimeHours = 16.0,
                            To = "Wadai",
                            fromDestinationId = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a"),
                            toDestinationId = new Guid("6762ac25-184c-45fe-ba68-de1cbfc3a531")
                        },
                        new
                        {
                            Id = new Guid("77e9252a-612a-4ea1-9080-cd1860ab3480"),
                            Cost = 24.0,
                            From = "Sahara",
                            TimeHours = 32.0,
                            To = "Darfur",
                            fromDestinationId = new Guid("ac9877b1-d2ba-4cee-b54f-057944515b8b"),
                            toDestinationId = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a")
                        },
                        new
                        {
                            Id = new Guid("62d503c4-9c9e-4c4c-b065-250d6cfe8493"),
                            Cost = 9.0,
                            From = "Omdurman",
                            TimeHours = 12.0,
                            To = "Darfur",
                            fromDestinationId = new Guid("5ad64a19-b27a-48b9-95cf-0332e88d7fbf"),
                            toDestinationId = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a")
                        },
                        new
                        {
                            Id = new Guid("879e1562-3f6a-4d5f-9064-dc3c1cdc64de"),
                            Cost = 12.0,
                            From = "Suakin",
                            TimeHours = 16.0,
                            To = "Darfur",
                            fromDestinationId = new Guid("017f584a-c867-494b-809c-f4e2bfa7577e"),
                            toDestinationId = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a")
                        },
                        new
                        {
                            Id = new Guid("d79e1170-8f92-466c-8010-7f3a4fab8f4d"),
                            Cost = 6.0,
                            From = "Darfur",
                            TimeHours = 8.0,
                            To = "Bahr El Ghazal",
                            fromDestinationId = new Guid("5e991c00-c1de-45f5-9134-1f6b0267793a"),
                            toDestinationId = new Guid("fb3eb190-83c2-4d0b-932d-435e48293013")
                        },
                        new
                        {
                            Id = new Guid("065576fe-00f9-4628-94a5-f93318e7cff4"),
                            Cost = 9.0,
                            From = "Suakin",
                            TimeHours = 12.0,
                            To = "Addis Abeba",
                            fromDestinationId = new Guid("017f584a-c867-494b-809c-f4e2bfa7577e"),
                            toDestinationId = new Guid("0224c301-4a94-48f6-8df8-f27568583cf4")
                        },
                        new
                        {
                            Id = new Guid("2bbec322-f6ed-4e45-b6cb-cf9dedb591a9"),
                            Cost = 6.0,
                            From = "Victoria Soeen",
                            TimeHours = 8.0,
                            To = "Bahr El Ghazal",
                            fromDestinationId = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            toDestinationId = new Guid("fb3eb190-83c2-4d0b-932d-435e48293013")
                        },
                        new
                        {
                            Id = new Guid("acbd2698-31c6-43af-8248-e7935e846336"),
                            Cost = 9.0,
                            From = "Victoria Soeen",
                            TimeHours = 12.0,
                            To = "Addis Abeba",
                            fromDestinationId = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            toDestinationId = new Guid("0224c301-4a94-48f6-8df8-f27568583cf4")
                        },
                        new
                        {
                            Id = new Guid("f31800a4-6f0c-4bc3-93db-673108efc8fa"),
                            Cost = 9.0,
                            From = "Addis Abeba",
                            TimeHours = 12.0,
                            To = "Kap Guardafui",
                            fromDestinationId = new Guid("0224c301-4a94-48f6-8df8-f27568583cf4"),
                            toDestinationId = new Guid("45832d16-eadb-4bbf-b8f1-f2eb6b826d41")
                        },
                        new
                        {
                            Id = new Guid("73c05528-1095-4685-a477-9a83ea6c85db"),
                            Cost = 12.0,
                            From = "Victoria Soeen",
                            TimeHours = 16.0,
                            To = "Kabalo",
                            fromDestinationId = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            toDestinationId = new Guid("60b1c48c-4d2e-4a65-bf3b-c9315f23ab27")
                        },
                        new
                        {
                            Id = new Guid("a865dbad-9477-4bc3-bc27-24c848423ad2"),
                            Cost = 18.0,
                            From = "Victoria Faldene",
                            TimeHours = 24.0,
                            To = "Mocambique",
                            fromDestinationId = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            toDestinationId = new Guid("2b102387-95e6-4603-bb33-644352a280ad")
                        },
                        new
                        {
                            Id = new Guid("7cf6543a-e1a0-4ac0-8125-f3ed3eafa7ea"),
                            Cost = 18.0,
                            From = "Kap Guardafui",
                            TimeHours = 24.0,
                            To = "Zanzibar",
                            fromDestinationId = new Guid("45832d16-eadb-4bbf-b8f1-f2eb6b826d41"),
                            toDestinationId = new Guid("fd6624c4-846b-4d52-adda-b26171edc520")
                        },
                        new
                        {
                            Id = new Guid("5c44fa00-b0a6-4aca-9508-5e9c1342eedb"),
                            Cost = 9.0,
                            From = "Zanzibar",
                            TimeHours = 12.0,
                            To = "Mocambique",
                            fromDestinationId = new Guid("fd6624c4-846b-4d52-adda-b26171edc520"),
                            toDestinationId = new Guid("2b102387-95e6-4603-bb33-644352a280ad")
                        },
                        new
                        {
                            Id = new Guid("608df533-fc33-4e2e-b55a-9a2223e6193b"),
                            Cost = 9.0,
                            From = "Congo",
                            TimeHours = 12.0,
                            To = "Luanda",
                            fromDestinationId = new Guid("4e173e38-3feb-4fbf-b32e-39e7af310aa0"),
                            toDestinationId = new Guid("fdb01392-b9af-4dbb-a6d8-4b5805811377")
                        },
                        new
                        {
                            Id = new Guid("3bbc3281-61ba-481f-ad07-23053ce76a0e"),
                            Cost = 12.0,
                            From = "Kabalo",
                            TimeHours = 16.0,
                            To = "Luanda",
                            fromDestinationId = new Guid("60b1c48c-4d2e-4a65-bf3b-c9315f23ab27"),
                            toDestinationId = new Guid("fdb01392-b9af-4dbb-a6d8-4b5805811377")
                        },
                        new
                        {
                            Id = new Guid("0dfb1b66-6dd7-45c6-8391-8220c9c90598"),
                            Cost = 30.0,
                            From = "Luanda",
                            TimeHours = 40.0,
                            To = "Mocambique",
                            fromDestinationId = new Guid("fdb01392-b9af-4dbb-a6d8-4b5805811377"),
                            toDestinationId = new Guid("2b102387-95e6-4603-bb33-644352a280ad")
                        },
                        new
                        {
                            Id = new Guid("3cd516a1-a5af-4c89-a211-53d23ef59710"),
                            Cost = 33.0,
                            From = "Luanda",
                            TimeHours = 44.0,
                            To = "Dragebjerget",
                            fromDestinationId = new Guid("fdb01392-b9af-4dbb-a6d8-4b5805811377"),
                            toDestinationId = new Guid("c67fd119-9dc7-441c-8335-cfced090624b")
                        },
                        new
                        {
                            Id = new Guid("75fa7643-fece-4a5e-8390-bc968de05229"),
                            Cost = 12.0,
                            From = "Mocambique",
                            TimeHours = 16.0,
                            To = "Dragebjerget",
                            fromDestinationId = new Guid("2b102387-95e6-4603-bb33-644352a280ad"),
                            toDestinationId = new Guid("c67fd119-9dc7-441c-8335-cfced090624b")
                        },
                        new
                        {
                            Id = new Guid("86eb5fd7-40a6-480c-b238-f846c1d9ac94"),
                            Cost = 15.0,
                            From = "Mocambique",
                            TimeHours = 20.0,
                            To = "Victoria Faldene",
                            fromDestinationId = new Guid("2b102387-95e6-4603-bb33-644352a280ad"),
                            toDestinationId = new Guid("5b787360-98aa-48ff-b180-2343d1b4a22d")
                        },
                        new
                        {
                            Id = new Guid("b871f054-205e-4575-aa45-c9b86d7837ec"),
                            Cost = 9.0,
                            From = "Victoria Faldene",
                            TimeHours = 12.0,
                            To = "Dragebjerget",
                            fromDestinationId = new Guid("5b787360-98aa-48ff-b180-2343d1b4a22d"),
                            toDestinationId = new Guid("c67fd119-9dc7-441c-8335-cfced090624b")
                        },
                        new
                        {
                            Id = new Guid("f7d3f6c1-5434-4cb4-bcc9-819d8e77e997"),
                            Cost = 15.0,
                            From = "Marrakesh",
                            TimeHours = 20.0,
                            To = "Sahara",
                            fromDestinationId = new Guid("65c280d6-e9fa-4dd4-8f3c-918aeef28e1b"),
                            toDestinationId = new Guid("ac9877b1-d2ba-4cee-b54f-057944515b8b")
                        },
                        new
                        {
                            Id = new Guid("290b6f0a-dc8c-4206-89f2-de156f95d57f"),
                            Cost = 15.0,
                            From = "Sierra Leone",
                            TimeHours = 20.0,
                            To = "Guld kysten",
                            fromDestinationId = new Guid("7289b9c0-d3a2-47c4-8ef1-42b761a9071b"),
                            toDestinationId = new Guid("a8100e5c-42bf-4039-be60-8d5390fecf35")
                        },
                        new
                        {
                            Id = new Guid("ee59fa6b-471f-48bd-90a0-85f381bf361c"),
                            Cost = 12.0,
                            From = "Victoria Faldene",
                            TimeHours = 16.0,
                            To = "Hvalbugten",
                            fromDestinationId = new Guid("5b787360-98aa-48ff-b180-2343d1b4a22d"),
                            toDestinationId = new Guid("db372b4a-782f-444a-8976-a57e0883573a")
                        },
                        new
                        {
                            Id = new Guid("8eb3c0e2-6269-476c-9117-e5cdcfaeea48"),
                            Cost = 12.0,
                            From = "Hvalbugten",
                            TimeHours = 16.0,
                            To = "Kapstaden",
                            fromDestinationId = new Guid("db372b4a-782f-444a-8976-a57e0883573a"),
                            toDestinationId = new Guid("84bbf8a7-07e1-41a5-ba00-302d98886fb9")
                        },
                        new
                        {
                            Id = new Guid("5e141a39-3e6e-4c4a-843f-73584a163651"),
                            Cost = 15.0,
                            From = "Victoria Soeen",
                            TimeHours = 20.0,
                            To = "Zanzibar",
                            fromDestinationId = new Guid("7a4aee29-b0a5-45db-90dc-3756abc449ec"),
                            toDestinationId = new Guid("fd6624c4-846b-4d52-adda-b26171edc520")
                        });
                });

            modelBuilder.Entity("Telstar.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("from")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("heightInCm")
                        .HasColumnType("float");

                    b.Property<double>("lengthInCm")
                        .HasColumnType("float");

                    b.Property<double>("paidToEICInUSD")
                        .HasColumnType("float");

                    b.Property<double>("paidToOAInUSD")
                        .HasColumnType("float");

                    b.Property<DateTime>("timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalCostInUSD")
                        .HasColumnType("float");

                    b.Property<Guid>("typeid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("weightInKg")
                        .HasColumnType("float");

                    b.Property<double>("widthInCm")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("typeid");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("Telstar.Models.ShipmentType", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("priceModifier")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("ShipmentType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Telstar.Models.Edge", b =>
                {
                    b.HasOne("Telstar.Models.Destination", "fromDestination")
                        .WithMany("FromEdges")
                        .HasForeignKey("fromDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Telstar.Models.Destination", "toDestination")
                        .WithMany("ToEdges")
                        .HasForeignKey("toDestinationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("fromDestination");

                    b.Navigation("toDestination");
                });

            modelBuilder.Entity("Telstar.Models.Shipment", b =>
                {
                    b.HasOne("Telstar.Models.ShipmentType", "type")
                        .WithMany("shipments")
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("type");
                });

            modelBuilder.Entity("Telstar.Models.Destination", b =>
                {
                    b.Navigation("FromEdges");

                    b.Navigation("ToEdges");
                });

            modelBuilder.Entity("Telstar.Models.ShipmentType", b =>
                {
                    b.Navigation("shipments");
                });
#pragma warning restore 612, 618
        }
    }
}
