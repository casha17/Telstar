// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelstarLogistics.Data;

#nullable disable

namespace TelstarLogistics.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TelstarLogistics.Models.Destination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("destinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d92aa27-fa1d-4370-b696-ec1c4cef74a0"),
                            City = "Addis Abeba"
                        },
                        new
                        {
                            Id = new Guid("8b273f19-f6da-4898-a92a-c43cba2ea0c9"),
                            City = "Amatave"
                        },
                        new
                        {
                            Id = new Guid("41be40ef-5686-4d3f-982d-a46cd6038018"),
                            City = "Bahr El Ghazal"
                        },
                        new
                        {
                            Id = new Guid("81e6086b-2a18-463d-8af0-2015f70fc881"),
                            City = "Cairo"
                        },
                        new
                        {
                            Id = new Guid("732f7c8e-fd41-45b8-ac20-8cd51cc8d5f6"),
                            City = "Congo"
                        },
                        new
                        {
                            Id = new Guid("65701e4c-690f-4402-9642-6c954dd32aa3"),
                            City = "Dakar"
                        },
                        new
                        {
                            Id = new Guid("c6415afa-4d75-4980-84a0-8c751b5ea962"),
                            City = "Darfur"
                        },
                        new
                        {
                            Id = new Guid("f8780aa3-70ff-470c-b73d-d7158236dcf0"),
                            City = "De Kanariske Oeyer"
                        },
                        new
                        {
                            Id = new Guid("1a51d25d-a210-4e13-b5f0-5727618dac9f"),
                            City = "Dragebjerget"
                        },
                        new
                        {
                            Id = new Guid("69d5ed64-2fc5-40a0-9fe7-949d7a5a7211"),
                            City = "Guldkysten"
                        },
                        new
                        {
                            Id = new Guid("36a74330-2cd2-43f1-83e0-f6df721f6e04"),
                            City = "Hvalbugten"
                        },
                        new
                        {
                            Id = new Guid("c7bbe187-a0ff-4618-a848-dc283ab0f998"),
                            City = "Kabalo"
                        },
                        new
                        {
                            Id = new Guid("7ccebbfa-dbf1-4f8e-ae2d-a5e8279b70a8"),
                            City = "Kap Guardafui"
                        },
                        new
                        {
                            Id = new Guid("f2621e52-025e-43ab-bc8f-1984453b9efc"),
                            City = "Kap St. Marie"
                        },
                        new
                        {
                            Id = new Guid("1d017de4-a03e-42b1-be8d-8a6cd38f59b8"),
                            City = "Kapstaden"
                        },
                        new
                        {
                            Id = new Guid("3d0cdcb3-dcc1-42d2-bb97-45d03c27ae96"),
                            City = "Luanda"
                        },
                        new
                        {
                            Id = new Guid("4b1eba97-0bb7-4a77-ab7c-ff4a65970779"),
                            City = "Marrakesh"
                        },
                        new
                        {
                            Id = new Guid("2fd0c63f-09e5-4874-9c53-73c549f7756c"),
                            City = "Mocambique"
                        },
                        new
                        {
                            Id = new Guid("a9ae4624-f69f-4671-8cfe-382cb4063c77"),
                            City = "Omdurman"
                        },
                        new
                        {
                            Id = new Guid("710eb3ad-7015-4721-9296-6ad77af82f16"),
                            City = "Sahara"
                        },
                        new
                        {
                            Id = new Guid("4c2955fc-6e28-4d54-a8a8-5367d14d2980"),
                            City = "Sierra Leone"
                        },
                        new
                        {
                            Id = new Guid("7ac1e6a5-8178-4ed5-bd4f-61854f7ea8ca"),
                            City = "Slavekysten"
                        },
                        new
                        {
                            Id = new Guid("27b7ce97-2c0a-4cd7-9cc2-b0c22de82ff0"),
                            City = "St. Helena"
                        },
                        new
                        {
                            Id = new Guid("9a601cdd-cdec-47bc-9d7f-62ccd038f12b"),
                            City = "Suakin"
                        },
                        new
                        {
                            Id = new Guid("b99b020a-6614-4028-abab-7b41009dc0e7"),
                            City = "Tanger"
                        },
                        new
                        {
                            Id = new Guid("1d4c8697-5a58-4068-8440-abb339a20218"),
                            City = "Timbuktu"
                        },
                        new
                        {
                            Id = new Guid("38d7619f-a3a0-4dee-96f9-d91d2a87850c"),
                            City = "Tripoli"
                        },
                        new
                        {
                            Id = new Guid("4d7159bf-ca7d-45d3-9df1-c554d3cd2d2d"),
                            City = "Tunis"
                        },
                        new
                        {
                            Id = new Guid("217a6aa8-285e-4251-af05-ff67e00cb46c"),
                            City = "Victoria Faldene"
                        },
                        new
                        {
                            Id = new Guid("da469bc5-6017-4ff0-9acb-bab10e0c11e3"),
                            City = "Victoria Soeen"
                        },
                        new
                        {
                            Id = new Guid("b9416791-4f9e-4515-8480-be716746c938"),
                            City = "Wadai"
                        },
                        new
                        {
                            Id = new Guid("66988758-9703-4a45-9e51-97ac19551089"),
                            City = "Zanzibar"
                        });
                });

            modelBuilder.Entity("TelstarLogistics.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("heightInCm")
                        .HasColumnType("float");

                    b.Property<double>("lengthInCm")
                        .HasColumnType("float");

                    b.Property<double>("paidToEICInUSD")
                        .HasColumnType("float");

                    b.Property<double>("paidToOAInUSD")
                        .HasColumnType("float");

                    b.Property<string>("timestamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("totalCostInUSD")
                        .HasColumnType("float");

                    b.Property<double>("weightInKg")
                        .HasColumnType("float");

                    b.Property<double>("widthInCm")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("shipments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
